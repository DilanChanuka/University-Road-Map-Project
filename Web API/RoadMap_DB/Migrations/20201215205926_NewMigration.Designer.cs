// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoadMap_DB.Data;

namespace RoadMap_DB.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20201215205926_NewMigration")]
    partial class NewMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RoadMap_DB.Models.Department", b =>
                {
                    b.Property<int>("dept_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("dept_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("dept_id");

                    b.ToTable("department");
                });

            modelBuilder.Entity("RoadMap_DB.Models.Entrance", b =>
                {
                    b.Property<int>("entrance_id")
                        .HasColumnType("int");

                    b.Property<int>("e_location_id")
                        .HasColumnType("int");

                    b.Property<int>("e_dept_id")
                        .HasColumnType("int");

                    b.HasKey("entrance_id", "e_location_id");

                    b.HasIndex("e_dept_id");

                    b.HasIndex("e_location_id");

                    b.ToTable("entrance");
                });

            modelBuilder.Entity("RoadMap_DB.Models.Floor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("f_dept_id")
                        .HasColumnType("int");

                    b.Property<int>("f_location_id")
                        .HasColumnType("int");

                    b.Property<int>("floor_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("f_dept_id");

                    b.HasIndex("f_location_id");

                    b.ToTable("floor");
                });

            modelBuilder.Entity("RoadMap_DB.Models.Inner_route", b =>
                {
                    b.Property<int>("in_route_id")
                        .HasColumnType("int");

                    b.Property<int>("i_location_id")
                        .HasColumnType("int");

                    b.Property<int>("i_dept_id")
                        .HasColumnType("int");

                    b.Property<int>("i_floor_id")
                        .HasColumnType("int");

                    b.HasKey("in_route_id", "i_location_id");

                    b.HasIndex("i_dept_id");

                    b.HasIndex("i_location_id");

                    b.ToTable("inner_route");
                });

            modelBuilder.Entity("RoadMap_DB.Models.Location", b =>
                {
                    b.Property<int>("location_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("lat_value")
                        .HasColumnType("double");

                    b.Property<double>("lng_value")
                        .HasColumnType("double");

                    b.Property<string>("location_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("location_id");

                    b.ToTable("location");
                });

            modelBuilder.Entity("RoadMap_DB.Models.Place", b =>
                {
                    b.Property<int>("place_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("p_dept_id")
                        .HasColumnType("int");

                    b.Property<int>("p_floor_id")
                        .HasColumnType("int");

                    b.Property<int>("p_location_id")
                        .HasColumnType("int");

                    b.HasKey("place_id");

                    b.HasIndex("p_dept_id");

                    b.HasIndex("p_location_id");

                    b.ToTable("place");
                });

            modelBuilder.Entity("RoadMap_DB.Models.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("faculty")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("pwd")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<string>("type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("user_id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("RoadMap_DB.Models.User_privilage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("user1_id")
                        .HasColumnType("int");

                    b.Property<int>("user2_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("user1_id");

                    b.HasIndex("user2_id");

                    b.ToTable("user_privilage");
                });

            modelBuilder.Entity("RoadMap_DB.Models.Vertext_Location", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("graph_No")
                        .HasColumnType("int");

                    b.Property<int>("location_id")
                        .HasColumnType("int");

                    b.Property<int>("vertex_No")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("location_id");

                    b.ToTable("vertext_location");
                });

            modelBuilder.Entity("RoadMap_DB.Models.foot_route", b =>
                {
                    b.Property<int>("f_route_id")
                        .HasColumnType("int");

                    b.Property<int>("f_location_id")
                        .HasColumnType("int");

                    b.HasKey("f_route_id", "f_location_id");

                    b.HasIndex("f_location_id");

                    b.ToTable("foot_route");
                });

            modelBuilder.Entity("RoadMap_DB.Models.vehicle_route", b =>
                {
                    b.Property<int>("v_route_id")
                        .HasColumnType("int");

                    b.Property<int>("v_location_id")
                        .HasColumnType("int");

                    b.HasKey("v_route_id", "v_location_id");

                    b.HasIndex("v_location_id");

                    b.ToTable("vehicle_route");
                });

            modelBuilder.Entity("RoadMap_DB.Models.Entrance", b =>
                {
                    b.HasOne("RoadMap_DB.Models.Department", "department")
                        .WithMany("dentrance")
                        .HasForeignKey("e_dept_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoadMap_DB.Models.Location", "Location")
                        .WithMany("lentrance")
                        .HasForeignKey("e_location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoadMap_DB.Models.Floor", b =>
                {
                    b.HasOne("RoadMap_DB.Models.Department", "department")
                        .WithMany("dfloor")
                        .HasForeignKey("f_dept_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoadMap_DB.Models.Location", "location")
                        .WithMany("lfloors")
                        .HasForeignKey("f_location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoadMap_DB.Models.Inner_route", b =>
                {
                    b.HasOne("RoadMap_DB.Models.Department", "department")
                        .WithMany("dinner_routes")
                        .HasForeignKey("i_dept_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoadMap_DB.Models.Location", "location")
                        .WithMany("linner_Routes")
                        .HasForeignKey("i_location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoadMap_DB.Models.Place", b =>
                {
                    b.HasOne("RoadMap_DB.Models.Department", "department")
                        .WithMany("dplace")
                        .HasForeignKey("p_dept_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoadMap_DB.Models.Location", "location")
                        .WithMany("lplaces")
                        .HasForeignKey("p_location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoadMap_DB.Models.User_privilage", b =>
                {
                    b.HasOne("RoadMap_DB.Models.User", "user1")
                        .WithMany()
                        .HasForeignKey("user1_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoadMap_DB.Models.User", "user2")
                        .WithMany()
                        .HasForeignKey("user2_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoadMap_DB.Models.Vertext_Location", b =>
                {
                    b.HasOne("RoadMap_DB.Models.Location", "location")
                        .WithMany("lvertext_Locations")
                        .HasForeignKey("location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoadMap_DB.Models.foot_route", b =>
                {
                    b.HasOne("RoadMap_DB.Models.Location", "location")
                        .WithMany("lf_route")
                        .HasForeignKey("f_location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoadMap_DB.Models.vehicle_route", b =>
                {
                    b.HasOne("RoadMap_DB.Models.Location", "location")
                        .WithMany("lv_route")
                        .HasForeignKey("v_location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
